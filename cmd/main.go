package main

import (
	"context"
	"errors"
	"fmt"
	"net/http"
	"os"
	"time"

	dapr "github.com/dapr/go-sdk/client"
	daprd "github.com/dapr/go-sdk/service/http"
	"github.com/go-logr/zapr"
	"github.com/gorilla/mux"
	"github.com/mattn/go-colorable"
	"github.com/oklog/run"
	"github.com/rs/cors"
	httpSwagger "github.com/swaggo/http-swagger"
	"go.uber.org/zap"
	"go.uber.org/zap/zapcore"

	_ "github.com/pkedy/megabank/docs" // docs is generated by Swag CLI, you have to import it.

	"github.com/pkedy/megabank/pkg/account"
	"github.com/pkedy/megabank/pkg/transfer"
)

// @title MegaBank Account APIs
// @version 1.0
// @description This API was created using the Dapr SDK and is good but could be better.
// @termsOfService https://api.evilcorp.com/terms/

// @contact.name API Support
// @contact.url https://api.evilcorp.com/support
// @contact.email api@evilcorp.com

// @license.name Apache 2.0
// @license.url https://www.apache.org/licenses/LICENSE-2.0

// @host localhost:8091
// api.evilcorp.com
func main() {
	ctx := context.Background()
	// Initialize logger
	zapConfig := zap.NewDevelopmentEncoderConfig()
	zapConfig.EncodeLevel = zapcore.CapitalColorLevelEncoder
	zapLog := zap.New(zapcore.NewCore(
		zapcore.NewConsoleEncoder(zapConfig),
		zapcore.AddSync(colorable.NewColorableStdout()),
		zapcore.DebugLevel,
	))
	log := zapr.NewLogger(zapLog)

	daprClient, err := dapr.NewClient()
	if err != nil {
		panic(err)
	}
	defer daprClient.Close()
	accountService := account.New(log, daprClient)
	transferService := transfer.New(log, daprClient)
	activities := transfer.NewActivities(daprClient)

	var g run.Group
	// Register actors
	{
		s := daprd.NewService(":8080")
		s.RegisterActorImplFactory(account.Factory(log))
		s.RegisterActorImplFactory(transfer.Factory(log, activities))
		g.Add(func() error {
			return s.Start()
		}, func(err error) {
			s.Stop()
		})
	}
	// Register HTTP services
	{
		port := 8091
		r := mux.NewRouter()
		accountService.RegisterService(r)
		transferService.RegisterService(r)
		r.HandleFunc("/swagger/{file}", httpSwagger.Handler(
			//The url pointing to API definition
			httpSwagger.URL(fmt.Sprintf("http://localhost:%d/swagger/doc.json", port)),
		))

		http.Handle("/", r)

		c := cors.New(cors.Options{
			AllowedOrigins:   []string{"*"},
			AllowCredentials: true,
		})

		handler := c.Handler(r)

		srv := http.Server{
			Handler: handler,
			Addr:    fmt.Sprintf(":%d", port),
			// Good practice: enforce timeouts for servers you create!
			WriteTimeout: 15 * time.Second,
			ReadTimeout:  15 * time.Second,
		}

		g.Add(func() error {
			return srv.ListenAndServe()
		}, func(err error) {
			srv.Shutdown(ctx)
		})
	}
	// Termination signals
	{
		g.Add(run.SignalHandler(ctx, os.Interrupt, os.Kill))
	}

	var se run.SignalError
	if err := g.Run(); err != nil && !errors.As(err, &se) {
		log.Error(err, "goroutine error")
		os.Exit(1)
	}
}
